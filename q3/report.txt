Implementation has been done using threads in the pthread library.
Compilation must be done together : gcc client.cpp server.cpp -lpthread

Working of the server code:
- Firstly, the direct connections in the network are given as inputted to server.cpp
- These inputs given constitute a graph, and a weighted, undirected graph is constructed
- Once the graph is constructed, we perform dijkstra algorithm over it to identify the shortest path and smallest delay between node 0 and all other nodes

Working of the client code:
- This code is a wrapper code, which acts like a shell for the server code to run
- The commands supported are pt and send

pt:
usage - pt
result - prints the routing table as given in the pdf

send:
usage - send 3 Hello!
result - sends the message 'Hello!' to node 3 starting from node 0, sends the packet from node 0 to node 3 using the shortest path calculated earlier,
and each node is a thread. Message passing between threads is implemented. For simulation purpose, the message is assumed to take one second to go from one 
server node to another, and the current node, destination node, forwareded node and the message are printed at every transmission
constraint - the message shouldn't have any spaces

Some additional points:
- Make sure to give a space ' ' after the last digit in the graph specification

Input format:
4 5
0 1 15
0 2 50
1 2 15
2 3 20
0 3 40 
pt
send 2 Hello!

If servers fail, all edges to that server are completely removed, and another routing path is found, which would require re-computation of the routing table 
and finally, there might also be situations where the graph is no more connected and in which case, some nodes may not be reachable.